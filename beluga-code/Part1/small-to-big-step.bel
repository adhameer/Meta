%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
%                Basics: Mechanizing Simple Languages and Proofs               %
%                         Encoding Proofs by Induction                         %
%                  Relating Small-step and Big-step Semantics                  %
%                                                                              %
%                             by Nicolas Jeannerod                             %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%  First, let us define the bigstep semantics. The idea is that instead of     %
%  modifying the term step-by-step, we go directly to the value. This is also  %
%  called the natural semantics.                                               %
%                                                                              %
%                  V value                  M ↓ V                              %
%                  ——————— B-Value     ——————————————— B-Succ                  %
%                   V ↓ V              succ M ↓ succ V                         %
%                                                                              %
%     M1 ↓ true   M2 ↓ V                     M1 ↓ false   M3 ↓ V               %
%  ————————————————————————— B-IfTrue     ————————————————————————— B-IfFalse  %
%  if M1 then M2 else M3 ↓ V              if M1 then M2 else M3 ↓ V            %
%                                                                              %
%                  M ↓ z                  M ↓ succ V                           %
%               —————————— B-PredZero     —————————— B-PredSucc                %
%               pred M ↓ z                pred M ↓ V                           %
%                                                                              %
%             M ↓ z                          M ↓ succ V                        %
%         ——————————————— B-IszeroZero     ———————————————— B-IszeroSucc       %
%        iszero M ↓ true                  iszero M ↓ false                     %

LF bigstep : term -> term -> type =
   | b_value       : value V
		     -> bigstep V V
   | b_succ        : bigstep M V
		     -> bigstep (succ M) (succ V)

   | b_pred_zero   : bigstep M z
		     -> bigstep (pred M) z
   | b_pred_succ   : bigstep M (succ V)
		     -> bigstep (pred M) V

   | b_iszero_zero : bigstep M z
		     -> bigstep (iszero M) true
   | b_iszero_succ : bigstep M (succ V)
		     -> bigstep (iszero M) false

   | b_if_true     : bigstep M1 true  -> bigstep M2 V
		     -> bigstep (if_then_else M1 M2 M3) V
   | b_if_false    : bigstep M1 false -> bigstep M3 V
		     -> bigstep (if_then_else M1 M2 M3) V
;



%  We didn't propagated the value hypothesis in the whole bigstep constructor  %
%  because we don't need it. Infact, we can prove the following:               %
%                                                                              %
%  If  M ↓ V  then V is a value.                                               %

rec bstep_value : [|- bigstep M V] -> [|- value V] =
/ total b (bstep_value _ _ b) /
  fn b => case b of
  | [|- b_value E] => [|- E]
  | [|- b_succ B]  => let [|- E] = bstep_value [|- B] in [|- v_succ E]

  | [|- b_pred_zero B] => bstep_value [|- B]
  | [|- b_pred_succ B] => let [|- v_succ E] = bstep_value [|- B] in [|- E]

  | [|- b_iszero_zero B] => [|- v_true]
  | [|- b_iszero_succ B] => [|- v_false]

  | [|- b_if_true  B1 B2] => bstep_value [|- B2]
  | [|- b_if_false B1 B3] => bstep_value [|- B3]
;



%  Let us now prove the first part of what we want to prove: the bigstep       %
%  relation is included in the multi_step relation.                            %
%                                                                              %
%  If  M ↓ V  then  M →* V.                                                    %

rec bstep_to_mstep : [|- bigstep M V] -> [|- multi_step M V] =
/ total b (bstep_to_mstep _ _ b) /
  fn b =>
  case b of
  | [|- b_value _] => [|- ms_ref]

  | [|- b_succ B] =>
    let [|- S] = bstep_to_mstep [|- B] in
    mstep_succ [|- S]
    % or mstep_succ (bstep_to_mstep [|- B])

  | [|- b_pred_zero B] =>
    let [|- S] = bstep_to_mstep [|- B] in
    let [|- S'] = mstep_pred [|- S] in
    [|- ms_tr S' (ms_step e_pred_zero)]

  | [|- b_pred_succ B] =>
    let [|- S] = bstep_to_mstep [|- B] in
    let [|- S'] = mstep_pred [|- S] in
    let [|- v_succ V] = bstep_value [|- B] in
    [|- ms_tr S' (ms_step (e_pred_succ V))]

  | [|- b_iszero_zero B] =>
    let [|- S] = bstep_to_mstep [|- B] in
    let [|- S'] = mstep_iszero [|- S] in
    [|- ms_tr S' (ms_step e_iszero_zero)]

  | [|- b_iszero_succ B] =>
    let [|- S] = bstep_to_mstep [|- B] in
    let [|- S'] = mstep_iszero [|- S] in
    let [|- v_succ V] = bstep_value [|- B] in
    [|- ms_tr S' (ms_step (e_iszero_succ V))]

  | [|- b_if_true  B1 B2] : [|- bigstep (if_then_else _ M2 M3) _] =>
    let [|- S1] = bstep_to_mstep [|- B1] in
    let [|- S2] = bstep_to_mstep [|- B2] in
    let [|- S1'] = mstep_if_then_else [|- S1] [|- M2] [|- M3] in
    [|- ms_tr (ms_tr S1' (ms_step e_if_true)) S2]

  | [|- b_if_false B1 B3] : [|- bigstep (if_then_else _ M2 M3) _] =>
    let [|- S1] = bstep_to_mstep [|- B1] in
    let [|- S3] = bstep_to_mstep [|- B3] in
    let [|- S1'] = mstep_if_then_else [|- S1] [|- M2] [|- M3] in
    [|- ms_tr (ms_tr S1' (ms_step e_if_false)) S3]
;


%  The fact that values can't change isn't trivial for Beluga, and we will     %
%  to show it. This comes from the fact that you can have different ways to    %
%  prove that `succ V` with V a value evaluates to `succ V`:                   %
%                                                                              %
%             —————————— V-True                 —————————— V-True              %
%             true value                        true value                     %
%           ——————————————— V-Succ              ——————————— B-Value            %
%           succ true value                     true ↓ true                    %
%        ————————————————————— B-Value     ————————————————————— B-Succ        %
%        succ true ↓ succ true             succ true ↓ succ true               %

rec bstep_values_stagnate : [|- bigstep V1 V2] -> [|- value V1] -> [|- equal V1 V2] =
/ total e (bstep_values_stagnate _ _ _ e) /
  fn b => fn e => case e of
  | [|- v_z]       => let [|- b_value _] = b in [|- ref]
  | [|- v_true]    => let [|- b_value _] = b in [|- ref]
  | [|- v_false]   => let [|- b_value _] = b in [|- ref]
  | [|- v_succ E'] =>
    (case b of
     | [|- b_value _] => [|- ref]
     | [|- b_succ B'] =>
       let [|- ref] = bstep_values_stagnate [|- B'] [|- E'] in [|- ref]
    )
;



%  Let us now show that if  M → N ↓ V,  then  M ↓ V.  Once we will have this   %
%  property, it will not be hard to obtain the same one for →* and to apply    %
%  it to any value.                                                            %

rec step_bstep_to_bstep : [|- step M N] -> [|- bigstep N V] -> [|- bigstep M V] =
/ total s (step_bstep_to_bstep _ _ _ s _) /
  fn s => fn b =>
  let [|- B] = b in
  case s of

  | [|- e_if_true] =>
    [|- b_if_true (b_value v_true) B]

  | [|- e_if_false] =>
    [|- b_if_false (b_value v_false) B]

  | [|- e_pred_zero] =>
    let [|- ref] = bstep_values_stagnate [|- B] [|- v_z] in
    % or let [|- b_value v_z] = [|- B] in
    [|- b_pred_zero B]

  | [|- e_pred_succ E] =>
    let [|- ref] = bstep_values_stagnate [|- B] [|- E] in
    % /!\ No `or` this time.
    % This is for this case that we wrote bstep_values_stagnate.
    [|- b_pred_succ (b_value (v_succ E))]

  | [|- e_iszero_zero] =>
    let [|- ref] = bstep_values_stagnate [|- B] [|- v_true] in
    % or let [|- b_value v_true] = [|- B] in
    [|- b_iszero_zero (b_value v_z)]

  | [|- e_iszero_succ E] =>
    let [|- ref] = bstep_values_stagnate [|- B] [|- v_false] in
    % or let [|- b_value v_false] = [|- B] in
    [|- b_iszero_succ (b_value (v_succ E))]

  | [|- e_if_then_else S] =>
    (case [|- B] of
     | [|- b_value E] => impossible [|- E]
     | [|- b_if_true  B1' B2'] =>
       let [|- B1] = step_bstep_to_bstep [|- S] [|- B1'] in
       [|- b_if_true  B1 B2']
     | [|- b_if_false B1' B3'] =>
       let [|- B1] = step_bstep_to_bstep [|- S] [|- B1'] in
       [|- b_if_false B1 B3']
    )

  | [|- e_succ S] =>
    (case [|- B] of
     | [|- b_value E] =>
       let [|- v_succ E'] = [|- E] in
       let [|- B'] = step_bstep_to_bstep [|- S] [|- b_value E'] in
       [|- b_succ B']
     | [|- b_succ B] =>
       let [|- B'] = step_bstep_to_bstep [|- S] [|- B] in
       [|- b_succ B']
    )

  | [|- e_pred S] =>
    (case [|- B] of
     | [|- b_value E] => impossible [|- E]
     | [|- b_pred_zero B1'] =>
       let [|- B1] = step_bstep_to_bstep [|- S] [|- B1'] in
       [|- b_pred_zero B1]
     | [|- b_pred_succ B1'] =>
       let [|- B1] = step_bstep_to_bstep [|- S] [|- B1'] in
       [|- b_pred_succ B1]
    )

  | [|- e_iszero S] =>
    (case [|- B] of
     | [|- b_value E] => impossible [|- E]
     | [|- b_iszero_zero B1'] =>
       let [|- B1] = step_bstep_to_bstep [|- S] [|- B1'] in
       [|- b_iszero_zero B1]
     | [|- b_iszero_succ B1'] =>
       let [|- B1] = step_bstep_to_bstep [|- S] [|- B1'] in
       [|- b_iszero_succ B1]
)
;



%  We can now easely extend this to the multi_step relation.This will just be  %
%  a simple induction on the multi_step constructor.                           %
%                                                                              %
%  If  M →* N ↓ V  then  M ↓ V.                                                %

rec mstep_bstep_to_bstep : [|- multi_step M N] -> [|- bigstep N V]
			   -> [|- bigstep M V] =
/ total s (mstep_bstep_to_bstep _ _ _ s _) /
  fn s => fn b => case s of
  | [|- ms_tr S1 S2] =>
    let [|- B2] = mstep_bstep_to_bstep [|- S2] b in
    mstep_bstep_to_bstep [|- S1] [|- B2]
  | [|- ms_ref] => b
  | [|- ms_step S'] => step_bstep_to_bstep [|- S'] b
;



%  And now we can prove the wanted theorem. This is only an application of     %
%  the previous one, with  N == v.                                             %
%                                                                              %
%  If  M →* V  with V a value, then  M ↓ V.                                    %

rec mstep_to_bstep : [|- multi_step M V] -> [|- value V] -> [|- bigstep M V] =
/ total s (mstep_to_bstep _ _ s _) /
  fn s => fn v =>
  let [|- V] = v in
  mstep_bstep_to_bstep s [|- b_value V]
;
