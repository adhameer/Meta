%{
  CH 3: Encoding Proofs by Induction
  CH 3.3: Termination
  Author: Brigitte Pientka

}%


% ----------------------------------------------------------------------------
% LEMMAS
% Type preservation for multi-steps
rec multi_tps : [|- hastype M T] -> [|- multi_step M M'] -> [|- hastype M' T] =
/ total s (multi_tps m t m' d s)/
fn d => fn s => case s of
| [|- ms_ref] => d
| [|- ms_tr S1 S2] =>
  let d1 = multi_tps d  [|- S1] in
   multi_tps d1 [|- S2]
| [|- ms_step S] => tps d [|- S]
;


%{
Lemma: IF multi-step M M' THEN multi-step (if_then_else M M2 M3) (if_then_else M' M2 M3).
}%

rec mstep_if_then_else :
  [ |- multi_step M M'] ->
  {M2:[ |- term]}{M3:[ |- term]}
  [ |- multi_step (if_then_else M M2 M3) (if_then_else M' M2 M3)] =
/ total ms (mstep_if_then_else _ _ ms)/
fn ms => case ms of
| [ |- ms_ref] => mlam M2 => mlam M3 => [ |- ms_ref]
| [ |- ms_step S] =>
  mlam M2 => mlam M3 => [ |- ms_step (e_if_then_else S)]

| [ |- ms_tr S1 S2] =>
  mlam M2 => mlam M3 =>
  let [ |- S1'] = mstep_if_then_else [ |- S1] [ |- M2 ] [ |- M3 ] in
  let [ |- S2'] = mstep_if_then_else [ |- S2] [ |- M2 ] [ |- M3 ] in
    [ |- ms_tr S1' S2']
;

%{
Lemma: IF multi-step M M' THEN multi-step (succ M) (succ M').
}%

rec mstep_succ :
 [ |- multi_step M M'] -> [ |- multi_step (succ M) (succ M') ] =
/ total ms (mstep_succ m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_succ S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_succ [ |- MS1] in
  let [ |- MS2'] = mstep_succ [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

%{
Lemma: IF multi-step M M' THEN multi-step (pred M) (pred M').
}%


rec mstep_pred :
  [ |- multi_step M M'] -> [ |- multi_step (pred M) (pred M')] =
/ total ms (mstep_pred m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_pred S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_pred [ |- MS1] in
  let [ |- MS2'] = mstep_pred [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;


%{
Lemma: IF multi-step M M' THEN multi-step (pred M) (pred M').
}%


rec mstep_iszero :
  [ |- multi_step M M'] -> [ |- multi_step (iszero M) (iszero M')] =
/ total ms (mstep_iszero m m' ms)/
fn ms => case ms of
| [ |- ms_ref] => [ |- ms_ref]
| [ |- ms_step S] =>
    [ |- ms_step (e_iszero S)]
| [ |- ms_tr MS1 MS2] =>
  let [ |- MS1'] = mstep_iszero [ |- MS1] in
  let [ |- MS2'] = mstep_iszero [ |- MS2] in
    [ |- ms_tr MS1' MS2']
;

% ----------------------------------------------------------------------------
%{

 MAIN THEOREM:

 For every well-typed term, there exists an evaluation sequence  which leads to
 a value, i.e. no term will get stuck.

}%

LF halts: term -> type =
| result: multi_step M M' -> value M'
       -> halts M;


rec terminate : [|- hastype M T] -> [ |- halts M] =
/ total d (terminate m t d)/
fn d => case d of
| [ |- t_true] => [ |- result ms_ref v_true]

| [ |- t_false] => [ |- result ms_ref v_false]

| [ |- t_if D D1 D2] : [|- hastype (if_then_else M M1 M2) T] =>
  (case terminate [|- D] of
   | [|- result MS v_true] =>
     let [|- MS0] = mstep_if_then_else [|- MS] [|- M1] [|- M2] in
     let [|- result MS1 W'] = terminate [|- D1] in
       [|- result (ms_tr (ms_tr MS0 (ms_step e_if_true)) MS1) W']
   | [|- result MS v_false] =>
     let [|- MS0] = mstep_if_then_else [|- MS] [|- M1] [|- M2] in
     let [|- result MS1 W'] = terminate [|- D2] in
       [|- result (ms_tr (ms_tr MS0 (ms_step e_if_false)) MS1) W']

   | [|- result MS v_z] => impossible multi_tps [|- D] [|- MS]
   | [|- result MS (v_succ V)] => impossible multi_tps [|- D] [|- MS]
 )

| [ |- t_zero] => [ |- result ms_ref v_z]

| [ |- t_succ D] =>
  (case terminate [ |- D] of
   | [|- result MS v_true]  => impossible multi_tps [|- D] [|- MS]
   | [|- result MS v_false] => impossible multi_tps [|- D] [|- MS]

   | [ |- result MS V] =>
     let [ |- MS']         = mstep_succ [ |- MS] in
     [ |- result MS' (v_succ V)]
 )

| [ |- t_pred D] =>
  (case terminate [ |- D ] of
   | [ |- result MS v_z] =>
     let [ |- MS'] = mstep_pred [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_pred_zero))) v_z]
   | [ |- result MS (v_succ V)] =>
     let [ |- MS'] = mstep_pred [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_pred_succ V))) V]

   | [ |- result MS v_true]  => impossible multi_tps [|- D] [|- MS]
   | [ |- result MS v_false] => impossible multi_tps [|- D] [|- MS]
 )

| [|- t_iszero D] =>
  (case terminate [|- D] of
   | [ |- result MS v_z] =>
     let [ |- MS'] = mstep_iszero [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_iszero_zero))) v_true]
   | [ |- result MS (v_succ V)] =>
     let [ |- MS'] = mstep_iszero [ |- MS] in
       [ |- result (ms_tr MS' (ms_step (e_iszero_succ V))) v_false]

   | [ |- result MS v_true]  => impossible multi_tps [|- D] [|- MS]
   | [ |- result MS v_false] => impossible multi_tps [|- D] [|- MS]
  )
;


